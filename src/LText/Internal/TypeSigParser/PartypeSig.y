-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module PartypeSig where
import AbstypeSig
import LextypeSig
import ErrM

}

%name pExpr Expr
%name pExpr1 Expr1

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '->' { PT _ (TS _ 3) }
  'Content' { PT _ (TS _ 4) }

L_quoted { PT _ (TL $$) }


%%

String  :: { String }  : L_quoted {  $1 }

Expr :: { Expr }
Expr : Expr1 '->' Expr { EArrow $1 $3 } 
  | Expr1 { $1 }


Expr1 :: { Expr }
Expr1 : 'Content' { EUnit } 
  | String { ETerm $1 }
  | '(' Expr ')' { $2 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

